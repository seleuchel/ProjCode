@루트로 사용할 깃 저장소 초기화 (왜 필요?)
  git init 
  
@원격 레포지토리 복사 [clone]
  git clone "rep addr"
  
@로컬에서 작업을 마치고, 인덱스(index-나 이런파일 수정함)에 등록 [add]
  git add "파일이름"
  or git add *
 
@원격 레포지토리에 등록하기 위해 설명과 함께 head에 반영 [commit]
  git commit -m "커밋에 대한 설명"
  
@원격 레포지토리에 반영
  git push origin master
  (* clone으로 받은 경우가 아니면, git remote add orgin "원격레포지토리주소" )
  

<브랜치>
  원래 파일을 안전하게 수정하기 위해 사용
  1. 원래 레포지토리에서 브랜치를 만든다.
  2. 브랜치에서 작업을 수행한다.
  3. 원래 레포지토리에 브랜치의 내용을 병합한다.
  
@브랜치 만들기
  git checkout -b 브랜치이름

@브랜치간 이동
  git checkout 브랜치이름

@브랜치 제거
  git branch -d 브랜치이름

@원래 레포지토리에 브랜치 반영 [push]
  git push origin 브랜치이름
  

<갱신>
  개발을 하다보면, 다른 사람들이 원격 레포를 수정하여 로컬 레포와 원격 레포의 버전이 달라질 수 있다!
 
 @로컬 레포지토리 갱신 [pull]
  git pull
  (* pull을 하면 원격 레포의 수정된 내용이 로컬에 받아지고 병합됨) [pull = fetch(수정내용 받아짐) + merge(병합)]
  
 @로컬에서 다른 브랜치 변경내용을 *사용자가 현재 위치한 브랜치에 병합
  git merge 브랜치 이름
  
 <충돌>
  코드를 작성하다보면 충돌이 일어날 수도 있다. 
  충돌 내용은 직접 수정해야한다.
  
 @충돌 내용 수정 후에 파일 병합
  git add 파일이름
 
 @병합하기 전에 어떻게 바뀌었는지 확인
  git diff 원래브랜치 비교할브랜치
  
 
